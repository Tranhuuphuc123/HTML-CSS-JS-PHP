**********************************THUỘC TÍNH ANIMATION HIỆU ỨNG CHUYỂN ĐỘNG TRONG CSS*********************************
>>>>>KHÁI NIỆM<<<<<
 => Thuộc tính animation trong CSS được sử dụng để tạo hiệu ứng hoặc chuyển động trên các phần tử HTML. 
 => Nó cho phép bạn tạo các hoạt hình, chuyển động và thay đổi thuộc tính của các phần tử một cách động 
 dựa trên thời gian.
 => Thuộc tính animation bao gồm các phần sau:
  + Tên của animation: 
   -> Xác định tên của animation bạn muốn sử dụng. Bạn phải định nghĩa animation bằng cách sử dụng
    @keyframes trước khi có thể sử dụng nó.

  + Thời gian hoàn thành: 
   -> Xác định thời gian animation sẽ diễn ra. Bạn có thể sử dụng giá trị như giây (s) hoặc mili giây (ms).

  + Hàm thời gian (timing function): 
   -> Xác định cách giá trị thay đổi theo thời gian. Các hàm thông dụng bao gồm 
   ease, linear, ease-in, ease-out, ease-in-out..., và nhiều hàm khác để tạo các hiệu ứng chuyển đổi mềm mại.
   -> Ý nghĩa cụ thể của các hàm này 
        #1/ "ease": Hàm "ease" (là hàm mặc định khi không có hàm nào được chỉ định) tạo ra một hiệu ứng 
        chuyển đổi mềm mại bắt đầu chậm và kết thúc chậm. Nó làm cho sự thay đổi bắt đầu chậm, sau đó 
        nhanh chóng và kết thúc chậm, tạo ra hiệu ứng mượt mà.

        #2/ "linear," :  Hàm "linear" làm cho sự thay đổi trong giá trị thuộc tính diễn ra một cách đều đặn 
        và liên tục theo thời gian. Điều này có nghĩa rằng tốc độ thay đổi không thay đổi trong suốt quá trình
            chuyển đổi.

        #3/ "ease-in,": Hàm "ease-in" làm cho sự thay đổi bắt đầu chậm và tăng tốc theo thời gian. Nó làm cho 
        sự thay đổi khởi đầu mềm mại và sau đó tăng tốc, tạo ra hiệu ứng tăng tốc.

        #4/ "ease-out," : Hàm "ease-out" làm cho sự thay đổi bắt đầu nhanh chóng và giảm tốc theo thời gian. 
        Nó làm cho sự thay đổi khởi đầu nhanh chóng và sau đó giảm tốc, tạo ra hiệu ứng giảm tốc.

        #5/ "ease-in-out," : Hàm "ease-in-out" kết hợp cả "ease-in" và "ease-out." Nó làm cho sự thay đổi bắt đầu chậm, 
        sau đó tăng tốc, và kết thúc chậm, tạo ra hiệu ứng tăng tốc và giảm tốc.

        #6/ "forwards": Khi forwards được sử dụng, nó có ý nghĩa là hiệu ứng animation sẽ được giữ lại ở trạng thái cuối 
        cùng sau khi hoàn thành.
           ex:
              animation: slideInLeft ease .8s, fadeOut linear 3s forwards;
              -> fadeOut là một @keyFrame có chức năng là ẩn hộp thoaoj toast đi sau khi xuất hiện khoản 0.3s
              -> nếu không có forwards thì sau khi ẩn 3s nó lại quạy lại trạng thái ban đầu của keyFrame slideInLeft
              <=> với forwards nó sẽ giúp duy trì trạng thaais cuối cùng của fadeOut giúp nó sau khi ẩn sẽ không hiện lại nữa
              , ẩn và giữ trạng thái ẩn



  + Độ trễ (delay): 
    -> Xác định thời gian trước khi animation bắt đầu chạy. Bạn có thể sử dụng giây (s) hoặc mili giây (ms).

  + Số lần lặp (iteration count):
   -> Xác định số lần animation sẽ được lặp lại.

  + Hướng lặp (direction):
   -> Xác định hướng lặp của animation, chẳng hạn như lặp lại chạy xuôi (normal) hoặc chạy ngược (alternate).
 
  + Độ trễ bắt đầu (fill mode): 
   -> Xác định trạng thái của phần tử trước và sau khi animation hoàn thành.




===================================================
>>>ví dụ<<
  @keyframes move {
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX(100px);
    }
}

.box {
  width: 50px;
  height: 50px;
  background-color: blue;
  animation: move 2s ease-in-out 1s infinite alternate;
}

=> Trong ví dụ này, chúng ta đã định nghĩa một animation có tên "move" sử dụng @keyframes, và sau đó áp dụng animation này
 cho phần tử có lớp "box". Phần tử "box" sẽ di chuyển từ vị trí ban đầu đến vị trí cuối cùng trong 2 giây, sau đó quay trở 
 lại và lặp lại sau 1 giây.



=====================================
>>>>ví dụ thực tiễn code<<<
 => dùng code bên phần thực hành Toast Message có thể vào mục thực hành Toast Message để xem chi thiết
 => code demo:
   
  ## a/ html
    => đang sử dụng khai báo beem: toast__icon, toast__body, 
    => và các modifier của Beem: toast-success...
    (tham khảo lạ bài 26_Beem trong css)
     ....
        <div id="toast">
            <!--Mẫu toast thông báo Success - Warn - Info - Error-->
            <div class="toast  toast-Success">
                <div class="toast__icon">
                    <!--mục này bạn search trên trang font Awave icon tìm tên và chèn vào html -> lib link trên kia rồi-->
                    <i class="fa-regular fa-circle-check" style="color: #0fab0d;"></i>
                </div>
                <div class="toast__body">
                    <h3 class="toast__title">Success</h3>
                    <p class="toast__msg">kết nối thành công Successfully - thành công kết nối</p>
                </div>
                <div class="toast__close">
                    <!--chèn icon close(dấu x tắt thông báo)-->
                    <i class="fa-solid fa-xmark"></i>
                </div>
            </div>
        </div>
        ....

  ## b/ css

     ....
        /*************************Khai báo @keyframe**********************************
        /* Tạo hiệu ứng animation chuyển động(các mã khai báo @keyFrame ấy)*/

        /*đoạn mã " @keyframes" được sử dụng để định nghĩa các hoạt động hoặc chuyển động tùy chỉnh
        (animations) cho các phần tử HTML. " @keyframes" cho phép bạn xác định các bước trung gian 
        trong quá trình hoạt động của phần tử từ trạng thái này sang trạng thái khác.
        
        => slideInLeft: Đây là một keyframe dùng để tạo hiệu ứng trượt vào từ bên trái. Nó chứa hai trạng thái: 
        "from" và "to". 
        + Trạng thái "from" mô tả phần tử ban đầu với opacity (độ trong suốt) bằng 0 (không thấy) và vị trí ban 
        đầu bên ngoài màn hình bên trái (translateX(calc(100% + 32px))). 
        + Trạng thái "to" mô tả phần tử sau khi hoàn thành hoạt động, với opacity bằng 1 (hoàn toàn hiển thị) 
        và vị trí đã thay đổi để hiển thị ở vị trí ban đầu (translateX(0)).*/
        @keyframes slideInLeft {
            from {
            opacity: 0; 
            /* dùng transform thay đổi hình dạng của thẻ toast -> mục đích
            tạo hiệu ứng xuất hiện của hộp thoại khi nhấn button thì hôp thoại 
            toast xuất hiện từ phái bên phải vào phía bên trái một cách mượt mà
            tạo hiệu ứng chuyển nhẹ nhàng
            + tranlateX: di chuyển theo trục X với mục đích dịch chuyển toast từ từ 
            phía phải qua phía trái
            + calc(100% + 32px) -> là 100% là nó sẽ lấy đúng kích thước gốc của hộp thoại toast
            + 32px là vì cài #toast cách phải 32px nên + thêm cái này để đảm bảo khi ẩn toast 
            đi thì nó ẩn đúng bằng kích thước gốc của hộp thoại toast bao gôm cả lề phải mà
            thẻ bao có id #toast đã khai báo right; 32px, calc là hàm toán học giúp việc tranlateX
            có thể + thêm px*/
            transform: translateX(calc(100% + 32px));
            }
            to {
            opacity: 1;
            transform: translateX(0);
            }
        }
        
        /*fadeOut: Đây là một keyframe dùng để tạo hiệu ứng làm mờ dần. Chỉ có trạng thái "to" trong đó opacity 
        được đặt thành 0 (hoàn toàn trong suốt), tạo ra hiệu ứng làm mờ phần tử dần dần biến mất.*/
        @keyframes fadeOut {
            to {
            opacity: 0;
            }
        }


        /******************************đưa @KeyFrame vào animation cho Toast***************************************/
        /* ======= Toast message ======== */
        /*Mục chỉnh css Beem của mục thông báo các mục thong báo thành công, thất bại*/
        #toast{
            /* fixed giúp cho toast không bị trôi đi khi scroll tới tận cuối trang */
            position: fixed;
            top: 32px;
            right: 32px;
        }

        .toast{
            display:flex;
            align-items: center;
            background-color: #fff;
            border-radius: 2px;
            padding: 20px 0;
            border-left: 4px solid;
            /*Hiệu ứng đổ bóng*/
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.08);
            /*tạo hiệu ứng chuyển mềm mại-> xem lại transition ở trên*/
            transition: all linear 0.3s;
            margin-bottom: 10px;
            min-width: 400px;
            max-width: 450px;

            /*để xử lý hiệu ứng chuyển tôi đã tạo một animation là một @keyFrame có tên
            slideInLeft , sliderRight bên dưới với hiệu chỉnh tranforms như đã giải thích
            đầy đủ hiệu ứng công dụng của nó ở mục giải thích cho tranforms
            => ta lôi cái animation @keyFrame vào như sau
            => slideInLeft ease .8s:display:  
            + slideInLeft: cái keyFrame thiết kế bên dưới
            + "ease": Hàm "ease" (là hàm mặc định khi không có hàm nào được chỉ định) tạo ra một hiệu ứng 
            chuyển đổi mềm mại bắt đầu chậm và kết thúc chậm. Nó làm cho sự thay đổi bắt đầu chậm, sau đó 
            nhanh chóng và kết thúc chậm, tạo ra hiệu ứng mượt mà.
            +.8s là sự thay đổi chuyển động trong khoản 8s

            => fadeOut linear 2s:
            + fadOut là cai kayframe tạo hiệu ứng mờ viết bên dưới
            + linear: Hàm "linear" làm cho sự thay đổi trong giá trị thuộc tính diễn ra một cách đều đặn 
            và liên tục theo thời gian. Điều này có nghĩa rằng tốc độ thay đổi không thay đổi trong suốt 
            quá trình chuyển đổi.
            + 2s là thời gian sẽ mờ đi cái hộp thoại toast sau khi nó xuất hiện */

            animation: slideInLeft ease .8s, fadeOut linear 2s;

        }  
