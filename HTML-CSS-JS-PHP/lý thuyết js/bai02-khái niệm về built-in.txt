**** HÀM BUILT-IN FUNCTION ***
- hÀM BUILT-IN function là các hàm mà javascript đã xây dựng sẵn.. để thực thi thì chỉ việc gọi các hàm đó ra mà thui.

- các hàm buitl-in sẵn có trong javascript đó là:
 
 >>>> Hàm alert: xuất ra cấu lệnh theo yêu cầu trong hộp thoại trong js ( giống ahmf printf())
     cấu trúc: alert("... nội dung cần out put....");

 >>>> Hàm Console: in ra các dòng thông báo trong tab console trên web( bấm f12 mở phần console để text) chức năng trên web.
     cấu trúc:   console.object console('.. nội dung..')-->( Object console là phương thức hiển thị của lệnh console);
        - Object console bao gồm:log, asert, clear, error, warn....
             + console.log(): Giá trị truyền vào của .log() là tất cả các kiểu dữ liệu từ String, Number, Array, Object, Boolean,... rất linh hoạt các bạn nhé.

                            ++ Ví dụ:
                                    console.log(100) // Number
                                    console.log('www.suntech.edu.vn') // String
                                    console.log(['HTML', 'CSS', 'Javascript']) // Array
                                    console.log(true) // Boolean
                                    console.log({name: 'Khôi Phạm', job: 'Developer'})﻿ // Object
                                ----> nó sẽ hiện thị thông tin nội dung truy xuất lên phần console của web ( bấm f12 text).
            
             + console.warn & .error: giá trị truyền vào của .warn và .error là hiển thị thêm nút cảnh báo 
                        ++ ví dụ:

                                console.warn('dừng truy cập'); // hiển thị nút tam giác chấm thna vàng cảnh báo
                                console.error('nguy hiểm nha'); // cảnh báo dấu x ddoorr cảnh báo bên cạnh nội dung truy xuất.


            +  Console.assert(): Phương thức console.assert về mục đích sử dụng cũng giống như console.log() được dùng để in dữ liệu ra màn 
            hình console. Tuy nhiên với console.assert lại có hai tham số truyền vào. Tham số thứ nhất là điều kiện để in dữ liệu ra là true or
            false và Tham số thứ 2 là nội dung chúng ta muốn in ra .
                Chính sự khác nhau như vậy nên để in được dữ liệu với console.assert  nó còn phục thuộc vào tham số thứ nhất trả về là true 
            hay false nữa, Để hiểu hơn hãy xem ví dụ dưới đây:

                        ++ ví dụ:
                              console.assert(true, ['HTML', 'CSS', 'suntech.edu.vn']); 
                               => giá trị true khai báo Không được in ra
 
                              console.assert(false, ['HTML', 'CSS', 'suntech.edu.vn']);
                              => giá trị false khai báo Được in ra như sau: Assertion 

            + console.clear(): console.clear() cũng vậy. Nó cho phép ta xóa tất cả những gì đang có trên mình hình console.
              --> tìm hiểu thêm sau.. do có rất nhiều phương thức thuộc tính của console nên khiu đụng thực tế sẽ tìm hiểu thêm

            +  Console.count(): Phương thức console.count() trong Javascript nó cho phép đếm số lần mà hàm đó được gọi, mỗi lần được gọi nó 
            sự cộng lên 1, Ví dụ chúng ta định nghĩa 1 function ping Trong ping chúng ta sử dụng console.count
                 ++ ví dụ:
                                function ping() {
                                    console.count()
                                    }
                                    Chúng ta thực hiện gọi hàm ping() như sau

                                    ping() // call lần 1
                                    ping() // call lần 2
                                    ping() // call lần 3
                                    ping() // call lần 4
                                    ping() // call lần 5

                                    Sau đó các bạn chạy
                                    console.count()
                                    Kết quả: 6
                                                                
            + console.table(): Phương thức console.table(data[,columns]) cho phép hiển thị dữ liệu dưới dạng một bảng.

               ++ ví dụ:
                                       var person = {
                                            firstName: 'Khoi',
                                            lastName: 'Pham',
                                            website: 'suntech.edu.vn'
                                        }
                                        
                                        function test() {
                                            console.table(person);
                                        }

                                        test() // Run test function
        ...v.v.... còn rất nhiều thuộc tính của console ta sẽ tìm hiểu và bổ sung khi có nhu cầu thực tế ứng dụng



>>>>> Hàm confirm:  

    - Hàm confirm() trong JavaScript được sử dụng để hiển thị một hộp thoại với thông báo được chỉ định, cùng với nút “OK” và nút “Cancel“.
Hộp thoại xác nhận này thường được sử dụng nếu bạn muốn người dùng xác minh hoặc chấp nhận một điều gì đó.
    -  hàm confirm(). Hàm này sẽ giúp bạn hiển thị thông báo xác nhận với người dùng. Giả sử một người muốn xóa ảnh khỏi trang 
web. Vì tai nạn xảy ra và nút xóa có thể do vô tình ấn nhầm, nên trang web sẽ hiển thị thông báo xác nhận để kiểm tra quyết định này. Nó sẽ xuất 
hiện thêm nút cancel và ok trên hộp thoại thay vì trống trơn như lệnh aleert để hủy lệnh hoặc xác nhận đồng ý thực hiện 1 lệnh gì đó chằng hạn 
xóa dữ liệu( hỏi lại để đam bảo không xóa nhầm).

    ++ ví dụ:
            confirm(" bạn có chắc mún thoát khỏi trang web");

           ----> đây là lý thuyết suôn ta sẽ xây dựng chi tiết từ từ và bổ sung sau.



>>>> Hàm Prompt:
  - Hàm promt() trong JavaScript được sử dụng để hiển thị hộp thoại thông báo nhắc người dùng nhập vào dữ liệu dưới dạng văn bản. Khi hộp thoại
 thông báo hiện lên, nó sẽ đợi cho đến khi người dùng gửi văn bản đó hoặc từ chối nhập dữ liệu và huỷ hộp thoại. Lúc đó, hộp thoại thông báo sẽ 
 bị đóng.
     ++ ví dụ:
           prompt('yêu cầu nhập thông tin');
           ---> ta sẽ xử lý chi tiết sau.





>>>> hàm setTimeout(): hàm set thời gian sẽ chạy lệnh cần thực thi.

    ++ ví dụ:
                  function  chaythu(){
                        alert("chạy sau 1s");
                    }
                    setTimeout(chaythu, 1000);

            +++ hoặc có thể viết:
                        setTimeout(function() { 
                            alert(" chạy sau 1s)
                            }, 1000);

            +++ hoắc thể viết: kiểu string
                         setTimeout("alert('chạy sau 1s')",1000);

            ---> Nhưng do kiểu string không đc khuyến khích sử dụng ở hàm setTimeout nên ta có thể viết dưới dạng sau:
                         setTimeout(()=>alert("chạy sau 1s"),1000);





>>>>>> hàm set interval: 

   - Hàm setInterval() như cái tên của nó, hàm này sẽ thường được sử dụng để thiết lập độ trễ cho các hàm sẽ được thực hiện lặp lại như là
 hiệu ứng. Hàm setInterval() có quan hệ gần gũi với setTimeout()--> nó sẽ mặc định thời gian truy xuất dữ liệu ra( vd: hiện thông báo cứ sau 1s
 hiện 1 lần và cứa ặp đi lặp lại như thế sau một hkoangr thời gian do người viết đặt).

 - Cấu trúc:  setInterval ( expression, interval );
    + trong đó:
        ++ expression: expression là đoạn mã JavaScript được thực thi sau khi timeout chạy hết số mili giây đã thiết lập.
        ++ interval: thời gian lặp lại do người viết đặt ra
    + ví dụ:
                 
            

